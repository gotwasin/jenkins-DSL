import jenkins.*
import jenkins.model.*
import hudson.*
import hudson.model.*

def environment = ''
def subJobs = ''
def subJob = ''
def environmentFolder = ''
def folderStructure = ''
def tempTargetPath = ''
def tempFolder = ''
def existingJobs = ''
def existingItems = ''
def mainServiceType = ''
def subServiceType = ''
def serviceName = ''
def template = ''
def targetPath = ''
def temp = ''
def tempSubJobPath = ''
def tempSubJob = ''

def projectName = 'next'
def environments = [
  	'dev' : ['Build-Deploy'],
    'sit' : ['Build','Deploy'],
    'uat' : ['Deploy']
]

import jenkins.*
import jenkins.model.*
import hudson.*
import hudson.model.*

jenkins = Jenkins.instance

def String[] allJobs = jenkins.getAllItems(Job.class).fullName
def String[] allItems = jenkins.getAllItems(Item.class).fullName

def targetJobs = [
    'Java-backend/channel-api/mobile-profiles',
    'Java-backend/channel-api/mobile-creditcards',
    'Java-backend/channel-api/mobile-lookup',
    'Java-backend/channel-api/mobile-otp',
    'Java-backend/batch/fund-batch',
    'Java-backend/batch/fund-oa-batch',
    'Java-backend/common-api/next-localization-service'
]

println("Checking Project environment")  
environments.each { environmentsMap ->
  environment = environmentsMap.getKey() //{environment} -> Ex : dev
  subJobs = environments[environment].join(', ') //{subJob -> Ex : Build,Deploy,Build-Deploy}
  subJobs = subJobs.split(',')
  environmentFolder = projectName+"-"+environment //{environmentFolder} -> Ex : next-dev
  println "!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  println "projectName : ${projectName}"
  println "environment : ${environment}"
  println "Subjob :  ${subJobs}"
  println "============================"

  if (jenkins.getItemByFullName("${projectName}/${environmentFolder}") == null) {
    println("Environment folder not found, Creating Folder : ${projectName}/${environmentFolder}")
    println "============================"
    folderStructure = jenkins.getItemByFullName("${projectName}/template-${environment}/Path-template")
    tempTargetPath =  jenkins.getItemByFullName(projectName)
    jenkins.copy(folderStructure, environmentFolder)
    tempFolder = jenkins.getItemByFullName(environmentFolder)
    Items.move(tempFolder, tempTargetPath)
  }

  existingJobs = allJobs.findAll { job -> job.contains(environmentFolder) }
  existingItems = allItems.findAll { job -> job.contains(environmentFolder)}
  println "existingJobs :  ${existingJobs}"
  println "============================"          
  println "existingItems :  ${existingItems}"
  println "============================"
  
  targetJobs.each { job ->

    if(!existingJobs.any { existingJob -> existingJob.contains(job) } ) {
      
      mainServiceType = job.split('/')[0] //{mainServiceType -> Ex : backend}
      subServiceType = job.split('/')[1] //{subServiceType -> Ex : channel-api}
      serviceName = job.split('/')[-1] //{subServiceType -> Ex : channel-api}
      println "Environment Folder :  ${environmentFolder}"
      println "Starting Job :  ${mainServiceType}/${subServiceType}/${serviceName}"
      println "mainServiceType :  ${mainServiceType}"
      println "subServiceType :  ${subServiceType}"
      println "serviceName :  ${serviceName}"
      subJobs.each { subJob ->
      {
        println "template-full : ${projectName}/template-${environment}/Job-template/${subJob}/pipeline-template"
        template = jenkins.getItemByFullName("${projectName}/template-${environment}/Job-template/${subJob}/pipeline-template")
        println "templatePath : ${template}"
        
        println "target-full : ${projectName}/${environmentFolder}/${mainServiceType}/${subServiceType}/${subJob}"
        targetPath = jenkins.getItemByFullName("${projectName}/${environmentFolder}/${mainServiceType}/${subServiceType}/${subJob}")
        println "targetPath : ${targetPath}" //next/dev/backend/channel-api/mobile-profiles/test
      
        try {
          
          jenkins.copy(template, serviceName)
          temp = jenkins.getItemByFullName(serviceName)
          Items.move(temp, targetPath)
          println "Created : ${environmentFolder}/${job}"
          targetPath.save()
          
        } catch (Exception err) {
          
          temp = jenkins.getItemByFullName(serviceName)
          println err.message
          Items.delete(temp)
        }
      }
    } 
  }
}
